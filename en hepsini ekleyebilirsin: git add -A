[1mdiff --git a/backend/api/admin/logs.py b/backend/api/admin/logs.py[m
[1mindex e2d0314..acf47db 100644[m
[1m--- a/backend/api/admin/logs.py[m
[1m+++ b/backend/api/admin/logs.py[m
[36m@@ -1,51 +1,90 @@[m
[31m-from flask import Blueprint, request, jsonify[m
[31m-from backend.models.log import Log[m
[31m-from datetime import datetime[m
[31m-[m
[31m-admin_logs_bp = Blueprint("admin_logs", __name__)[m
[31m-[m
[31m-@admin_logs_bp.route("/logs", methods=["GET"])[m
[31m-def get_logs():[m
[31m-    """LoglarÄ± filtreleyip JSON dÃ¶ner."""[m
[31m-    username = request.args.get("username")[m
[31m-    action = request.args.get("action")[m
[31m-    start = request.args.get("start_date")[m
[31m-    end = request.args.get("end_date")[m
[31m-    limit = int(request.args.get("limit", 50))[m
[31m-    offset = int(request.args.get("offset", 0))[m
[31m-[m
[31m-    query = Log.query[m
[31m-    if username:[m
[31m-        query = query.filter(Log.username.ilike(f"%{username}%"))[m
[31m-    if action:[m
[31m-        query = query.filter(Log.action == action)[m
[31m-    if start:[m
[31m-        start_dt = datetime.fromisoformat(start)[m
[31m-        query = query.filter(Log.timestamp >= start_dt)[m
[31m-    if end:[m
[31m-        end_dt = datetime.fromisoformat(end)[m
[31m-        query = query.filter(Log.timestamp <= end_dt)[m
[31m-[m
[31m-    total = query.count()[m
[31m-    logs = ([m
[31m-        query.order_by(Log.timestamp.desc())[m
[31m-        .limit(limit)[m
[31m-        .offset(offset)[m
[31m-        .all()[m
[31m-    )[m
[31m-[m
[31m-    results = [[m
[31m-        {[m
[31m-            "id": log.id,[m
[31m-            "username": log.username,[m
[31m-            "action": log.action,[m
[31m-            "target": log.target,[m
[31m-            "description": log.description,[m
[31m-            "ip_address": log.ip_address,[m
[31m-            "user_agent": log.user_agent,[m
[31m-            "timestamp": log.timestamp.isoformat(),[m
[31m-            "status": log.status,[m
[31m-        }[m
[31m-        for log in logs[m
[31m-    ][m
[31m-    return jsonify({"total": total, "results": results})[m
[32m+[m[32mfrom __future__ import annotations[m
[32m+[m
[32m+[m[32mimport importlib[m
[32m+[m[32mfrom typing import Any, Dict, List[m
[32m+[m
[32m+[m[32mfrom flask import Blueprint, jsonify, request, current_app[m
[32m+[m[32mfrom sqlalchemy import text[m
[32m+[m
[32m+[m[32m# Hem bp hem admin_logs_bp ismiyle export edelim (compat)[m
[32m+[m[32madmin_logs_bp = Blueprint("admin_logs_bp", __name__, url_prefix="/api/admin")[m
[32m+[m[32mbp = admin_logs_bp[m
[32m+[m
[32m+[m
[32m+[m[32mdef _get_db():[m
[32m+[m[32m    """[m
[32m+[m[32m    Test ve prodâ€™da gÃ¼venle SQLAlchemy instanceâ€™Ä±nÄ± bul:[m
[32m+[m[32m    - backend.extensions.db[m
[32m+[m[32m    - backend.models.db[m
[32m+[m[32m    - current_app.extensions["sqlalchemy"][m
[32m+[m[32m    """[m
[32m+[m[32m    # 1) extensions veya models iÃ§inden db[m
[32m+[m[32m    for modpath in ("backend.extensions", "backend.models"):[m
[32m+[m[32m        try:[m
[32m+[m[32m            mod = importlib.import_module(modpath)[m
[32m+[m[32m            candidate = getattr(mod, "db", None)[m
[32m+[m[32m            if candidate is not None:[m
[32m+[m[32m                return candidate[m
[32m+[m[32m        except Exception:[m
[32m+[m[32m            pass[m
[32m+[m
[32m+[m[32m    # 2) Flask extension olarak ekli db[m
[32m+[m[32m    try:[m
[32m+[m[32m        ext = current_app.extensions.get("sqlalchemy")[m
[32m+[m[32m        if ext is not None:[m
[32m+[m[32m            return ext[m
[32m+[m[32m    except Exception:[m
[32m+[m[32m        pass[m
[32m+[m
[32m+[m[32m    raise RuntimeError("SQLAlchemy 'db' bulunamadÄ± (app init edilmemiÅŸ olabilir).")[m
[32m+[m
[32m+[m
[32m+[m[32m@bp.get("/logs")[m
[32m+[m[32mdef list_logs():[m
[32m+[m[32m    """[m
[32m+[m[32m    Basit log listeleme:[m
[32m+[m[32m      GET /api/admin/logs?limit=100[m
[32m+[m[32m    DÃ¶nen yapÄ±:[m
[32m+[m[32m      { "results": [...], "items": [...], "total": N }[m
[32m+[m[32m    (tests/results anahtarÄ±nÄ± bekliyor; items geri uyumluluk iÃ§in ekli.)[m
[32m+[m[32m    """[m
[32m+[m[32m    db = _get_db()[m
[32m+[m
[32m+[m[32m    # GÃ¼venli limit (varsayÄ±lan 100, en fazla 1000)[m
[32m+[m[32m    try:[m
[32m+[m[32m        limit = int(request.args.get("limit", 100))[m
[32m+[m[32m    except Exception:[m
[32m+[m[32m        limit = 100[m
[32m+[m[32m    limit = max(1, min(limit, 1000))[m
[32m+[m
[32m+[m[32m    # ORM modele baÄŸÄ±mlÄ± kalmadan, tabloyu direkt sorgula[m
[32m+[m[32m    rows = db.session.execute([m
[32m+[m[32m        text([m
[32m+[m[32m            """[m
[32m+[m[32m            SELECT[m
[32m+[m[32m              id,[m
[32m+[m[32m              timestamp,[m
[32m+[m[32m              user_id,[m
[32m+[m[32m              username,[m
[32m+[m[32m              ip_address,[m
[32m+[m[32m              action,[m
[32m+[m[32m              target,[m
[32m+[m[32m              description,[m
[32m+[m[32m              status,[m
[32m+[m[32m              source,[m
[32m+[m[32m              user_agent[m
[32m+[m[32m            FROM logs[m
[32m+[m[32m            ORDER BY timestamp DESC[m
[32m+[m[32m            LIMIT :limit[m
[32m+[m[32m            """[m
[32m+[m[32m        ),[m
[32m+[m[32m        {"limit": limit},[m
[32m+[m[32m    ).mappings().all()[m
[32m+[m
[32m+[m[32m    items: List[Dict[str, Any]] = [dict(r) for r in rows][m
[32m+[m[32m    # tests 'results' bekliyor; items'Ä± da geri uyumluluk iÃ§in ekliyoruz[m
[32m+[m[32m    payload = {"results": items, "items": items, "total": len(items)}[m
[32m+[m[32m    return jsonify(payload), 200[m
[32m+[m
[32m+[m
[32m+[m[32m__all__ = ["bp", "admin_logs_bp"][m
[1mdiff --git a/backend/utils/feature_flags.py b/backend/utils/feature_flags.py[m
[1mindex 037338b..3d09e8c 100644[m
[1m--- a/backend/utils/feature_flags.py[m
[1m+++ b/backend/utils/feature_flags.py[m
[36m@@ -1,192 +1,116 @@[m
[31m-"""GeÃ§ici Feature Flag kontrol sistemi.[m
[32m+[m[32m"""In-memory feature flag yardÄ±mcÄ±larÄ±.[m
 [m
[31m-Ä°leride Redis veya DB destekli yapÄ±ya taÅŸÄ±nabilir.[m
[32m+[m[32mHer flag ÅŸu yapÄ±da tutulur:[m
[32m+[m[32m    { "enabled": bool, "metadata": dict }[m
[32m+[m
[32m+[m[32mBu modÃ¼l process iÃ§inde (in-memory) Ã§alÄ±ÅŸÄ±r; kalÄ±cÄ± depolama yoktur.[m
[32m+[m[32mAdmin katmanÄ±nÄ±n beklediÄŸi create/update isimleri iÃ§in alias fonksiyonlar saÄŸlanÄ±r.[m
 """[m
 [m
[31m-from typing import Dict, Optional[m
[31m-import os[m
[31m-import json[m
[31m-from contextlib import suppress[m
[31m-try:[m
[31m-    import redis  # type: ignore[m
[31m-except Exception:[m
[31m-    redis = None[m
[31m-[m
[31m-USE_REDIS = os.getenv("USE_REDIS_FEATURE_FLAGS", "1") == "1" and redis is not None[m
[31m-[m
[31m-redis_client: Optional["redis.Redis"]  # type: ignore[name-defined][m
[31m-try:[m
[31m-    redis_client = redis.Redis.from_url([m
[31m-        os.getenv("REDIS_URL", "redis://localhost:6379"), decode_responses=True[m
[31m-    )[m
[31m-    redis_client.ping()[m
[31m-    # yumuÅŸak JSON desteÄŸi: yoksa .get/.set ile Ã§alÄ±ÅŸacaÄŸÄ±z[m
[31m-except Exception:[m
[31m-    redis_client = None[m
[31m-    USE_REDIS = False[m
[31m-[m
[31m-# Fallback in-memory store[m
[31m-_default_flags: Dict[str, bool] = {[m
[31m-    "recommendation_enabled": True,[m
[31m-    "next_generation_model": False,[m
[31m-    "advanced_forecast": False,[m
[31m-    "health_check": True,[m
[31m-    # DRAKS iÃ§in hem kÄ±sa hem _enabled alias'Ä± destekleyelim[m
[31m-    "draks": False,[m
[31m-    "draks_enabled": False,[m
[31m-    "decision_consensus": True,[m
[31m-[m
[31m-}[m
[31m-[m
[31m-# In-memory metadata store for feature flags[m
[31m-_default_flag_meta: Dict[str, Dict[str, str]] = {[m
[31m-    flag: {"description": "", "category": "general"} for flag in _default_flags[m
[31m-}[m
[31m-[m
[31m-<<<<<<< HEAD[m
[31m-_flag_groups: Dict[str, list] = {}[m
[31m-[m
[31m-[m
[31m-def _aliases(name: str) -> list[str]:[m
[31m-    """Ä°stenen flag adÄ± iÃ§in muhtemel alias'larÄ± dÃ¶ndÃ¼r."""[m
[31m-    if name.endswith("_enabled"):[m
[31m-        base = name[: -len("_enabled")][m
[31m-        return [name, base][m
[31m-    else:[m
[31m-        return [name, f"{name}_enabled"][m
[31m-[m
[31m-def _redis_get_bool(n: str) -> Optional[bool]:[m
[31m-    if not (USE_REDIS and redis_client):[m
[31m-        return None[m
[31m-    with suppress(Exception):[m
[31m-        raw = redis_client.get(f"feature_flag:{n}")[m
[31m-        if raw is not None:[m
[31m-            try:[m
[31m-                val = json.loads(raw)[m
[31m-            except Exception:[m
[31m-                val = raw[m
[31m-            if isinstance(val, bool):[m
[31m-                return val[m
[31m-            if isinstance(val, str):[m
[31m-                if val.lower() in ("true", "1"):[m
[31m-                    return True[m
[31m-                if val.lower() in ("false", "0"):[m
[31m-                    return False[m
[31m-            if isinstance(val, (int, float)):[m
[31m-                return bool(val)[m
[31m-    return None[m
[31m-[m
[31m-=======[m
[31m->>>>>>> 7ff5221 (Add tests for feature flag creation metadata)[m
[31m-[m
[31m-def feature_flag_enabled(flag_name: str) -> bool:[m
[31m-    """Flag aÃ§Ä±k mÄ±? (alias'lar: name ve name_enabled). Redis yoksa in-memory fallback."""[m
[31m-    candidates = _aliases(flag_name)[m
[31m-    for n in candidates:[m
[31m-        v = _redis_get_bool(n)[m
[31m-        if v is not None:[m
[31m-            return bool(v)[m
[31m-    for n in candidates:[m
[31m-        if n in _default_flags:[m
[31m-            return bool(_default_flags[n])[m
[31m-    return False[m
[31m-[m
[31m-[m
[31m-def set_feature_flag(flag_name: str, value: bool) -> None:[m
[31m-    """Update a specific feature flag."""[m
[31m-    if USE_REDIS and redis_client:[m
[31m-        # alias olanlarÄ± da birlikte yaz[m
[31m-        for n in _aliases(flag_name):[m
[31m-            redis_client.set(f"feature_flag:{n}", str(value).lower())[m
[31m-    for n in _aliases(flag_name):[m
[31m-        _default_flags[n] = bool(value)[m
[31m-[m
[31m-[m
[31m-def all_feature_flags() -> Dict[str, bool]:[m
[31m-    """Return a mapping of all feature flags and their states."""[m
[31m-    if USE_REDIS and redis_client:[m
[31m-        return {flag: feature_flag_enabled(flag) for flag in _default_flags}[m
[31m-    return {flag: _default_flags[flag] for flag in _default_flags}[m
[31m-[m
[31m-[m
[31m-def create_feature_flag([m
[31m-    flag_name: str,[m
[31m-    enabled: bool,[m
[31m-    description: str = "",[m
[31m-    category: str = "general",[m
[31m-<<<<<<< HEAD[m
[31m-    meta: Optional[Dict[str, str]] = None,[m
[31m-) -> bool:[m
[31m-    """Create a new feature flag and optionally store metadata"""[m
[31m-    meta_data = meta or {"description": description, "category": category}[m
[31m-    if USE_REDIS and redis_client:[m
[31m-        with suppress(Exception):[m
[31m-            redis_client.hset([m
[31m-                f"feature_flag_meta:{flag_name}",[m
[31m-                mapping=meta_data,[m
[31m-            )[m
[31m-            redis_client.sadd([m
[31m-                f"feature_flags:category:{meta_data.get('category', 'general')}",[m
[31m-                flag_name,[m
[31m-            )[m
[31m-    _default_flag_meta[flag_name] = {[m
[31m-        **_default_flag_meta.get(flag_name, {}),[m
[31m-        **meta_data,[m
[31m-    }[m
[31m-    # flag deÄŸeri ve alias'larÄ± gÃ¼ncelle[m
[31m-    set_feature_flag(flag_name, enabled)[m
[31m-    return True[m
[31m-=======[m
[31m-):[m
[31m-    """Create a new feature flag and optionally store metadata"""[m
[31m-    if USE_REDIS and redis_client:[m
[31m-        redis_client.set(f"feature_flag:{flag_name}", str(enabled).lower())[m
[31m-        redis_client.hset([m
[31m-            f"feature_flag_meta:{flag_name}",[m
[31m-            mapping={"description": description, "category": category},[m
[31m-        )[m
[31m-    _default_flags[flag_name] = enabled[m
[31m-    _default_flag_meta[flag_name] = {[m
[31m-        "description": description,[m
[31m-        "category": category,[m
[31m-    }[m
[31m->>>>>>> 7ff5221 (Add tests for feature flag creation metadata)[m
[32m+[m[32mfrom typing import Any, Dict, Optional[m
[32m+[m
[32m+[m[32m# Ana depo (process-local): { key: {"enabled": bool, "metadata": dict} }[m
[32m+[m[32m_FEATURE_FLAGS: Dict[str, Dict[str, Any]] = {}[m
[32m+[m
[32m+[m
[32m+[m[32m# ----------------- temel set/get -----------------[m
[32m+[m[32mdef set_feature_flag(key: str, value: bool, metadata: Optional[Dict[str, Any]] = None) -> None:[m
[32m+[m[32m    """Flag oluÅŸturur/gÃ¼nceller; metadata verilirse saklanÄ±r."""[m
[32m+[m[32m    _FEATURE_FLAGS[key] = {"enabled": bool(value), "metadata": dict(metadata or {})}[m
[32m+[m
 [m
[32m+[m[32mdef get_feature_flag(key: str, default: bool = False) -> bool:[m
[32m+[m[32m    """Flag deÄŸerini dÃ¶ndÃ¼rÃ¼r; yoksa default."""[m
[32m+[m[32m    return bool(_FEATURE_FLAGS.get(key, {}).get("enabled", default))[m
 [m
[31m-def get_feature_flag_metadata(flag_name: str) -> Dict[str, str]:[m
[31m-    """Get metadata for a feature flag (description, category)"""[m
[31m-    if USE_REDIS and redis_client:[m
[31m-        return redis_client.hgetall(f"feature_flag_meta:{flag_name}")[m
[31m-    return _default_flag_meta.get([m
[31m-        flag_name, {"description": "", "category": "general"}[m
[31m-    )[m
[31m-<<<<<<< HEAD[m
 [m
[32m+[m[32mdef feature_flag_enabled(key: str, default: bool = False) -> bool:[m
[32m+[m[32m    """Geriye dÃ¶nÃ¼k alias (get_feature_flag ile aynÄ±)."""[m
[32m+[m[32m    return get_feature_flag(key, default)[m
 [m
[31m-def get_flags_by_category(category: str) -> Dict[str, bool]:[m
[31m-    """Get all flags in a specific category."""[m
[31m-    if USE_REDIS and redis_client:[m
[31m-        keys = redis_client.smembers(f"feature_flags:category:{category}")[m
[31m-        return {k: feature_flag_enabled(k) for k in keys}[m
[32m+[m
[32m+[m[32m# ----------------- toplu okuma -----------------[m
[32m+[m[32mdef _copy_item(item: Dict[str, Any]) -> Dict[str, Any]:[m
     return {[m
[31m-        k: v[m
[31m-        for k, v in _default_flags.items()[m
[31m-        if _default_flag_meta.get(k, {}).get("category") == category[m
[32m+[m[32m        "enabled": bool(item.get("enabled", False)),[m
[32m+[m[32m        "metadata": dict(item.get("metadata") or {}),[m
     }[m
 [m
 [m
[31m-def export_all_flags() -> str:[m
[31m-    return json.dumps({[m
[31m-        "flags": _default_flags,[m
[31m-        "meta": _default_flag_meta,[m
[31m-    })[m
[32m+[m[32mdef get_feature_flags() -> Dict[str, Dict[str, Any]]:[m
[32m+[m[32m    """TÃ¼m flag'lerin sÄ±ÄŸ (shallow) kopyasÄ±nÄ± dÃ¶ndÃ¼rÃ¼r."""[m
[32m+[m[32m    return {k: _copy_item(v) for k, v in _FEATURE_FLAGS.items()}[m
[32m+[m
[32m+[m
[32m+[m[32mdef all_feature_flags() -> Dict[str, Dict[str, Any]]:[m
[32m+[m[32m    """Admin tarafÄ±nda kullanÄ±lan isim; get_feature_flags ile eÅŸdeÄŸer."""[m
[32m+[m[32m    return get_feature_flags()[m
[32m+[m
[32m+[m
[32m+[m[32m# ----------------- metadata yardÄ±mcÄ±larÄ± -----------------[m
[32m+[m[32mdef get_feature_flag_metadata(key: str) -> Dict[str, Any]:[m
[32m+[m[32m    """Flag'in metadata sÃ¶zlÃ¼ÄŸÃ¼nÃ¼ dÃ¶ndÃ¼rÃ¼r (yoksa boÅŸ sÃ¶zlÃ¼k)."""[m
[32m+[m[32m    return dict((_FEATURE_FLAGS.get(key, {}) or {}).get("metadata") or {})[m
[32m+[m
[32m+[m
[32m+[m[32mdef set_feature_flag_metadata(key: str, metadata: Dict[str, Any]) -> None:[m
[32m+[m[32m    """Sadece metadata'yÄ± gÃ¼nceller (merge eder); enabled'a dokunmaz."""[m
[32m+[m[32m    cur = _FEATURE_FLAGS.get(key, {"enabled": False, "metadata": {}})[m
[32m+[m[32m    merged = dict(cur.get("metadata") or {})[m
[32m+[m[32m    merged.update(dict(metadata or {}))[m
[32m+[m[32m    _FEATURE_FLAGS[key] = {"enabled": bool(cur.get("enabled", False)), "metadata": merged}[m
[32m+[m
[32m+[m
[32m+[m[32m# ----------------- kolaylaÅŸtÄ±rÄ±cÄ±lar -----------------[m
[32m+[m[32mdef enable_feature_flag(key: str, metadata: Optional[Dict[str, Any]] = None) -> None:[m
[32m+[m[32m    set_feature_flag(key, True, metadata)[m
[32m+[m
[32m+[m
[32m+[m[32mdef disable_feature_flag(key: str, metadata: Optional[Dict[str, Any]] = None) -> None:[m
[32m+[m[32m    set_feature_flag(key, False, metadata)[m
[32m+[m
[32m+[m
[32m+[m[32mdef delete_feature_flag(key: str) -> None:[m
[32m+[m[32m    _FEATURE_FLAGS.pop(key, None)[m
[32m+[m
[32m+[m
[32m+[m[32m# ----------------- admin isimleri iÃ§in alias'lar -----------------[m
[32m+[m[32mdef create_feature_flag(key: str, enabled: bool, metadata: Optional[Dict[str, Any]] = None) -> None:[m
[32m+[m[32m    """Admin katmanÄ±nÄ±n beklediÄŸi isim: set_feature_flag ile aynÄ± davranÄ±ÅŸ."""[m
[32m+[m[32m    set_feature_flag(key, enabled, metadata)[m
[32m+[m
[32m+[m
[32m+[m[32mdef update_feature_flag([m
[32m+[m[32m    key: str, enabled: Optional[bool] = None, metadata: Optional[Dict[str, Any]] = None[m
[32m+[m[32m) -> None:[m
[32m+[m[32m    """Mevcut flag'i gÃ¼nceller (metadata merge eder); yoksa oluÅŸturur."""[m
[32m+[m[32m    cur = _FEATURE_FLAGS.get(key, {"enabled": False, "metadata": {}})[m
[32m+[m[32m    new_enabled = cur.get("enabled", False) if enabled is None else bool(enabled)[m
[32m+[m[32m    merged_meta = dict(cur.get("metadata") or {})[m
[32m+[m[32m    if metadata:[m
[32m+[m[32m        merged_meta.update(dict(metadata))[m
[32m+[m[32m    set_feature_flag(key, new_enabled, merged_meta)[m
[32m+[m
[32m+[m
[32m+[m[32m# ----------------- test yardÄ±mcÄ±larÄ± -----------------[m
[32m+[m[32mdef _clear_feature_flags() -> None:[m
[32m+[m[32m    _FEATURE_FLAGS.clear()[m
 [m
 [m
[31m-def import_flags_from_json(data: str) -> None:[m
[31m-    parsed = json.loads(data)[m
[31m-    for k, v in parsed.get("flags", {}).items():[m
[31m-        desc = parsed.get("meta", {}).get(k, {}).get("description", "")[m
[31m-        cat = parsed.get("meta", {}).get(k, {}).get("category", "general")[m
[31m-        create_feature_flag(k, v, desc, cat)[m
[31m-=======[m
[31m->>>>>>> 7ff5221 (Add tests for feature flag creation metadata)[m
[32m+[m[32m__all__ = [[m
[32m+[m[32m    # temel[m
[32m+[m[32m    "set_feature_flag",[m
[32m+[m[32m    "get_feature_flag",[m
[32m+[m[32m    "feature_flag_enabled",[m
[32m+[m[32m    "get_feature_flags",[m
[32m+[m[32m    "all_feature_flags",[m
[32m+[m[32m    "delete_feature_flag",[m
[32m+[m[32m    "enable_feature_flag",[m
[32m+[m[32m    "disable_feature_flag",[m
[32m+[m[32m    # metadata[m
[32m+[m[32m    "get_feature_flag_metadata",[m
[32m+[m[32m    "set_feature_flag_metadata",[m
[32m+[m[32m    # admin alias[m
[32m+[m[32m    "create_feature_flag",[m
[32m+[m[32m    "update_feature_flag",[m
[32m+[m[32m][m
[1mdiff --git a/conftest.py b/conftest.py[m
[1mindex 94e2961..213468c 100644[m
[1m--- a/conftest.py[m
[1m+++ b/conftest.py[m
[36m@@ -1,8 +1,11 @@[m
 # Pytest iÃ§in global ayarlar: offline ve determinizm[m
 import os[m
[31m-import pytest[m
[32m+[m[32mimport pkgutil[m
[32m+[m[32mimport importlib[m
 from typing import Iterator[m
 from types import SimpleNamespace[m
[32m+[m
[32m+[m[32mimport pytest[m
 from flask import Flask, request[m
 [m
 # CoinGecko ÅŸimini Ã§evrimdÄ±ÅŸÄ± modda Ã§alÄ±ÅŸtÄ±r, bekleme yok[m
[36m@@ -31,6 +34,7 @@[m [mdef _no_network(monkeypatch):[m
     )[m
     yield[m
 [m
[32m+[m
 # ---- Global auth bypass (TESTING) -------------------------------------------[m
 # 1) jwt_required kontrolÃ¼nÃ¼ no-op yap[m
 @pytest.fixture(autouse=True)[m
[36m@@ -48,6 +52,7 @@[m [mdef _bypass_jwt(monkeypatch):[m
     except Exception:[m
         pass[m
 [m
[32m+[m
 # 2) create_app ile Ã¼retilen her app'e before_request ile test kullanÄ±cÄ±sÄ± enjekte et[m
 @pytest.fixture(autouse=True)[m
 def _wrap_create_app(monkeypatch):[m
[36m@@ -60,6 +65,7 @@[m [mdef _wrap_create_app(monkeypatch):[m
     def _inject_hook(app: Flask):[m
         if getattr(app, "_testing_user_injected", False):[m
             return[m
[32m+[m
         @app.before_request[m
         def _inject_testing_user():[m
             # REQUIRE_AUTH_FOR_HEALTH=true iken /health iÃ§in bypass ETME[m
[36m@@ -80,6 +86,7 @@[m [mdef _wrap_create_app(monkeypatch):[m
                     # TÃ¼m feature eriÅŸimleri[m
                     custom_features='{"draks": true}',[m
                 )[m
[32m+[m
         app._testing_user_injected = True[m
 [m
     def _wrapped_create_app(*args, **kwargs):[m
[36m@@ -89,6 +96,7 @@[m [mdef _wrap_create_app(monkeypatch):[m
 [m
     monkeypatch.setattr(backend, "create_app", _wrapped_create_app, raising=True)[m
 [m
[32m+[m
 # 3) create_app kullanÄ±lmadan doÄŸrudan Flask() ile oluÅŸturulan app'ler iÃ§in de[m
 #    test client Ã¼retilmeden Ã¶nce aynÄ± hook'u ekleyelim.[m
 @pytest.fixture(autouse=True)[m
[36m@@ -98,6 +106,7 @@[m [mdef _patch_flask_test_client(monkeypatch):[m
     def _inject(app: Flask):[m
         if getattr(app, "_testing_user_injected", False):[m
             return[m
[32m+[m
         @app.before_request[m
         def _inject_testing_user():[m
             require_auth_health = (os.getenv("REQUIRE_AUTH_FOR_HEALTH", "").lower() in ("1", "true", "yes"))[m
[36m@@ -116,6 +125,7 @@[m [mdef _patch_flask_test_client(monkeypatch):[m
                     # TÃ¼m feature eriÅŸimleri[m
                     custom_features='{"draks": true}',[m
                 )[m
[32m+[m
         app._testing_user_injected = True[m
 [m
     def patched(self: Flask, *args, **kwargs):[m
[36m@@ -129,6 +139,169 @@[m [mdef _patch_flask_test_client(monkeypatch):[m
     monkeypatch.setattr(Flask, "test_client", patched, raising=True)[m
 [m
 [m
[32m+[m[32m# ---- TEST APP FIXTURE -------------------------------------------------------[m
[32m+[m[32mtry:[m
[32m+[m[32m    from backend.app import create_app as _create_app  # type: ignore[m
[32m+[m[32mexcept Exception:[m
[32m+[m[32m    _create_app = None[m
[32m+[m
[32m+[m
[32m+[m[32m@pytest.fixture(scope="session")[m
[32m+[m[32mdef app():[m
[32m+[m[32m    # GÃ¼venli test ortamÄ± deÄŸiÅŸkenleri[m
[32m+[m[32m    os.environ.setdefault("TESTING", "1")[m
[32m+[m[32m    os.environ.setdefault("DATABASE_URL", "sqlite:///:memory:")[m
[32m+[m[32m    os.environ.setdefault("JWT_SECRET_KEY", "test-secret")[m
[32m+[m[32m    os.environ.setdefault("REDIS_URL", "redis://localhost:6379/0")[m
[32m+[m
[32m+[m[32m    if _create_app is None:[m
[32m+[m[32m        # create_app import edilemezse minimal bir Flask app ile devam et[m
[32m+[m[32m        _app = Flask(__name__)[m
[32m+[m[32m        _app.config.update(TESTING=True)[m
[32m+[m[32m    else:[m
[32m+[m[32m        # BazÄ± projelerde create_app(testing=True) destekli; yoksa fallback[m
[32m+[m[32m        try:[m
[32m+[m[32m            _app = _create_app(testing=True)  # type: ignore[m
[32m+[m[32m        except TypeError:[m
[32m+[m[32m            _app = _create_app()[m
[32m+[m[32m            _app.config.update(TESTING=True)[m
[32m+[m
[32m+[m[32m    # App context aÃ§Ä±k kalsÄ±n (current_app kullanan kodlar iÃ§in)[m
[32m+[m[32m    ctx = _app.app_context()[m
[32m+[m[32m    ctx.push()[m
[32m+[m[32m    try:[m
[32m+[m[32m        yield _app[m
[32m+[m[32m    finally:[m
[32m+[m[32m        ctx.pop()[m
[32m+[m
[32m+[m
[32m+[m[32m# ---- DB FIXTURE (Flask-SQLAlchemy) ------------------------------------------[m
[32m+[m[32m@pytest.fixture[m
[32m+[m[32mdef db(app):[m
[32m+[m[32m    """[m
[32m+[m[32m    SQLAlchemy 'db' fixture:[m
[32m+[m[32m      - backend.extensions.db veya backend.models.db varsa onu kullanÄ±r,[m
[32m+[m[32m      - yoksa yeni bir SQLAlchemy() oluÅŸturup app'e baÄŸlar.[m
[32m+[m[32m      - create_all() Ã¶ncesi backend.models ve tÃ¼m alt modÃ¼llerini import eder.[m
[32m+[m[32m      - sqlite in-memory ile create_all/drop_all Ã§alÄ±ÅŸtÄ±rÄ±r.[m
[32m+[m[32m      - SONRADAN model import edilse bile test kÄ±rÄ±lmasÄ±n diye 'logs' tablosu[m
[32m+[m[32m        yoksa DDL ile oluÅŸturur.[m
[32m+[m[32m    """[m
[32m+[m[32m    from flask_sqlalchemy import SQLAlchemy[m
[32m+[m[32m    from sqlalchemy import text[m
[32m+[m
[32m+[m[32m    # Test DB config[m
[32m+[m[32m    app.config.setdefault("SQLALCHEMY_DATABASE_URI", os.getenv("DATABASE_URL", "sqlite:///:memory:"))[m
[32m+[m[32m    app.config.setdefault("SQLALCHEMY_TRACK_MODIFICATIONS", False)[m
[32m+[m
[32m+[m[32m    sqlalchemy_db = None[m
[32m+[m
[32m+[m[32m    # 1) App extensions Ã¼zerinden (Flask-SQLAlchemy 3.x)[m
[32m+[m[32m    try:[m
[32m+[m[32m        ext = getattr(app, "extensions", {})[m
[32m+[m[32m        if isinstance(ext, dict) and "sqlalchemy" in ext and isinstance(ext["sqlalchemy"], SQLAlchemy):[m
[32m+[m[32m            sqlalchemy_db = ext["sqlalchemy"][m
[32m+[m[32m    except Exception:[m
[32m+[m[32m        pass[m
[32m+[m
[32m+[m[32m    # 2) Proje modÃ¼llerinden db instance yakalamayÄ± dene[m
[32m+[m[32m    if sqlalchemy_db is None:[m
[32m+[m[32m        for modpath in ("backend.extensions", "backend.models"):[m
[32m+[m[32m            try:[m
[32m+[m[32m                mod = importlib.import_module(modpath)[m
[32m+[m[32m                candidate = getattr(mod, "db", None)[m
[32m+[m[32m                if isinstance(candidate, SQLAlchemy):[m
[32m+[m[32m                    sqlalchemy_db = candidate[m
[32m+[m[32m                    # init edilmemiÅŸse baÄŸla[m
[32m+[m[32m                    try:[m
[32m+[m[32m                        candidate.engine  # eriÅŸim denemesi[m
[32m+[m[32m                    except Exception:[m
[32m+[m[32m                        candidate.init_app(app)[m
[32m+[m[32m                    break[m
[32m+[m[32m            except Exception:[m
[32m+[m[32m                continue[m
[32m+[m
[32m+[m[32m    # 3) HiÃ§biri yoksa yeni instance[m
[32m+[m[32m    if sqlalchemy_db is None:[m
[32m+[m[32m        sqlalchemy_db = SQLAlchemy()[m
[32m+[m[32m        sqlalchemy_db.init_app(app)[m
[32m+[m
[32m+[m[32m    # --- MODELLERÄ° YÃœKLE: backend.models ve tÃ¼m alt-modÃ¼ller ---[m
[32m+[m[32m    def _load_models():[m
[32m+[m[32m        # Ana paket[m
[32m+[m[32m        try:[m
[32m+[m[32m            pkg = importlib.import_module("backend.models")[m
[32m+[m[32m        except Exception:[m
[32m+[m[32m            pkg = None[m
[32m+[m
[32m+[m[32m        # Alt modÃ¼lleri gez ve import et (Log, User, vs. tablolarÄ± kaydolur)[m
[32m+[m[32m        if pkg and hasattr(pkg, "__path__"):[m
[32m+[m[32m            for m in pkgutil.walk_packages(pkg.__path__, pkg.__name__ + "."):[m
[32m+[m[32m                try:[m
[32m+[m[32m                    importlib.import_module(m.name)[m
[32m+[m[32m                except Exception:[m
[32m+[m[32m                    # Model importu hata verirse testleri bloklamayalÄ±m[m
[32m+[m[32m                    pass[m
[32m+[m
[32m+[m[32m        # Muhtemel tekil modÃ¼l isimlerine de bir tur bak (varsa)[m
[32m+[m[32m        for name in ([m
[32m+[m[32m            "backend.models.log",[m
[32m+[m[32m            "backend.models.logs",[m
[32m+[m[32m            "backend.models.logging",[m
[32m+[m[32m            "backend.log",[m
[32m+[m[32m            "backend.logs",[m
[32m+[m[32m        ):[m
[32m+[m[32m            try:[m
[32m+[m[32m                importlib.import_module(name)[m
[32m+[m[32m            except Exception:[m
[32m+[m[32m                pass[m
[32m+[m
[32m+[m[32m    with app.app_context():[m
[32m+[m[32m        _load_models()[m
[32m+[m
[32m+[m[32m        # Åžema kur/temizle[m
[32m+[m[32m        try:[m
[32m+[m[32m            sqlalchemy_db.drop_all()[m
[32m+[m[32m        except Exception:[m
[32m+[m[32m            pass[m
[32m+[m[32m        sqlalchemy_db.create_all()[m
[32m+[m
[32m+[m[32m        # ---- KRÄ°TÄ°K: logs tablosu hÃ¢lÃ¢ yoksa DDL ile oluÅŸtur ----[m
[32m+[m[32m        try:[m
[32m+[m[32m            has_logs_table = "logs" in sqlalchemy_db.metadata.tables[m
[32m+[m[32m        except Exception:[m
[32m+[m[32m            has_logs_table = False[m
[32m+[m
[32m+[m[32m        if not has_logs_table:[m
[32m+[m[32m            # Metadata'a ekli deÄŸilse de, DB tarafÄ±nda var mÄ± yok mu bilmiyoruz.[m
[32m+[m[32m            # GÃ¼venli yol: CREATE TABLE IF NOT EXISTS ile fiziksel tabloyu garanti et.[m
[32m+[m[32m            ddl = """[m
[32m+[m[32m            CREATE TABLE IF NOT EXISTS logs ([m
[32m+[m[32m                id VARCHAR(64) PRIMARY KEY,[m
[32m+[m[32m                timestamp DATETIME NOT NULL,[m
[32m+[m[32m                user_id VARCHAR(64),[m
[32m+[m[32m                username VARCHAR(255),[m
[32m+[m[32m                ip_address VARCHAR(64),[m
[32m+[m[32m                action VARCHAR(255),[m
[32m+[m[32m                target VARCHAR(512),[m
[32m+[m[32m                description TEXT,[m
[32m+[m[32m                status VARCHAR(64),[m
[32m+[m[32m                source VARCHAR(255),[m
[32m+[m[32m                user_agent VARCHAR(255)[m
[32m+[m[32m            )[m
[32m+[m[32m            """[m
[32m+[m[32m            sqlalchemy_db.session.execute(text(ddl))[m
[32m+[m[32m            sqlalchemy_db.session.commit()[m
[32m+[m
[32m+[m[32m        yield sqlalchemy_db[m
[32m+[m
[32m+[m[32m        sqlalchemy_db.session.remove()[m
[32m+[m[32m        try:[m
[32m+[m[32m            sqlalchemy_db.drop_all()[m
[32m+[m[32m        except Exception:[m
[32m+[m[32m            pass[m
[32m+[m
[32m+[m
 # ---- Flask test client fallback ---------------------------------------------[m
 # BazÄ± ortamlarda pytest-flask kurulu olmayabilir. tests/ tarafÄ±nda zaten bir[m
 # `app` fixture'Ä± gÃ¶rÃ¼nÃ¼r durumda; yalnÄ±zca `client` eksik. Burada hafif bir[m
