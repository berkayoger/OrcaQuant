name: CI
on:
  push:
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Type Check (Python + JS)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            backend/requirements.txt
      - run: |
          python -m pip install -U pip
          pip install ruff==0.6.9 mypy
      - name: Python Lint & mypy
        run: |
          ruff check .
          mypy backend
      - name: JS/TS Lint (ESLint & Prettier Check)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            frontend/package-lock.json
            web/package-lock.json
        continue-on-error: true
      - name: Run ESLint/Prettier if frontend exists
        run: |
          set -e
          DIR=""
          [ -f "frontend/package.json" ] && DIR="frontend"
          [ -z "$DIR" ] && [ -f "web/package.json" ] && DIR="web"
          if [ -n "$DIR" ]; then
            pushd "$DIR"
            npm ci
            npx eslint . || (echo "ESLint failed" && exit 1)
            npx prettier -c . || (echo "Prettier format check failed" && exit 1)
            popd
          else
            echo "No frontend folder detected, skipping JS lint."
          fi

  test_backend:
    name: Test (Python ${{ matrix.python }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ["3.10", "3.11", "3.12"]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ytd
          POSTGRES_PASSWORD: ytd
          POSTGRES_DB: ytd
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U ytd -d ytd" --health-interval=5s
          --health-timeout=5s --health-retries=20
      redis:
        image: redis:7
        ports: ["6379:6379"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            backend/requirements.txt
      - name: Install deps
        run: |
          python -m pip install -U pip
          # Sıra önemli: kök -> backend -> dev
          pip install -r requirements.txt
          pip install -r backend/requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest pytest-cov
      - name: Run tests
        env:
          DATABASE_URL: postgresql://ytd:ytd@localhost:5432/ytd
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest -q --maxfail=1 --disable-warnings \
                 --cov=backend --cov-report=xml --cov-fail-under=80
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.python }}
          path: coverage.xml

  test_frontend:
    name: Build & Smoke (Frontend)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            frontend/package-lock.json
            web/package-lock.json
      - name: Build if frontend exists
        run: |
          set -e
          DIR=""
          OUT=""
          [ -f "frontend/package.json" ] && DIR="frontend"
          [ -z "$DIR" ] && [ -f "web/package.json" ] && DIR="web"
          if [ -n "$DIR" ]; then
            pushd "$DIR"
            npm ci
            if npm run | grep -q "build"; then
              npm run build
              [ -d "dist" ] && OUT="dist"
              [ -z "$OUT" ] && [ -d "build" ] && OUT="build"
              [ -z "$OUT" ] && { echo "Build output not found"; exit 1; }
              test -f "$OUT/index.html" || { echo "index.html missing"; exit 1; }
              echo "Frontend build smoke OK ($OUT)"
            else
              echo "No build script in $DIR/package.json"
              exit 1
            fi
            popd
          else
            echo "No frontend folder detected, skipping."
          fi

  docker_smoke_backend:
    name: Docker Smoke (Backend)
    runs-on: ubuntu-latest
    needs: [test_backend]
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t ytd-kopya:ci -f backend/Dockerfile .
      - name: Smoke health
        run: |
          set -e
          docker run -d -p 5000:5000 --name ytd-ci ytd-kopya:ci
          for i in {1..30}; do
            sleep 2
            curl -fsS http://127.0.0.1:5000/health && exit 0 || true
          done
          echo "Service did not become healthy"
          docker logs ytd-ci
          exit 1
