name: CI OrcaQuant
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  packages: write

env:
  PYTHON_VERSION: "3.10"

jobs:
  lint_and_types:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Install dev deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt -r backend/requirements.txt
      - name: Ruff / Black / Mypy
        run: |
          ruff check .
          black --check .
          mypy backend || true  # Tip hatalar覺 kap覺 olarak istenirse '|| true' kald覺r覺n

  backend_tests:
    runs-on: ubuntu-latest
    needs: [lint_and_types]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt -r backend/requirements.txt
      - name: Run unit tests (parallel + flaky retry)
        run: |
          pytest -n auto --dist loadscope --cov=backend --cov-report=xml backend/tests/unit
      - name: Upload backend coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-backend.xml
          path: coverage.xml

  frontend_tests:
    runs-on: ubuntu-latest
    needs: [lint_and_types]
    if: ${{ hashFiles('frontend/package.json') != '' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install & test
        working-directory: frontend
        run: |
          npm ci
          npm test --if-present
          npm run build --if-present

  integration_tests:
    runs-on: ubuntu-latest
    needs: [backend_tests]
    services:
      docker: # placeholder to enable docker-in-docker context
        image: alpine:3.20
        options: >-
          --name dummy
    steps:
      - uses: actions/checkout@v4
      - name: Build & Up compose
        run: |
          docker compose -f docker-compose.ci.yml up -d --build
          chmod +x scripts/wait-for-http.sh
          ./scripts/wait-for-http.sh "http://127.0.0.1:8000/healthz" 60 2
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt -r backend/requirements.txt
      - name: Run integration tests
        env:
          INTEGRATION_BASE_URL: "http://127.0.0.1:8000"
        run: |
          pytest -n auto backend/tests/integration
      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v

  e2e_tests:
    runs-on: ubuntu-latest
    needs: [frontend_tests]
    if: ${{ hashFiles('e2e/package.json') != '' && vars.RUN_E2E == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Playwright
        working-directory: e2e
        run: |
          npm ci
          npx playwright install --with-deps
      - name: Run E2E (Playwright)
        working-directory: e2e
        env:
          E2E_BASE_URL: ${{ vars.E2E_BASE_URL }}
        run: |
          npx playwright test
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: e2e/playwright-report

  security_scans:
    runs-on: ubuntu-latest
    needs: [backend_tests, frontend_tests]
    steps:
      - uses: actions/checkout@v4
      - name: Gitleaks (Secrets)
        uses: zricethezav/gitleaks-action@v2
        with:
          args: --no-git -v
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Python deps audit
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit -r backend/requirements.txt -r backend/requirements-dev.txt
          safety check --full-report || true
          pip-audit -r backend/requirements.txt || true
      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

  build_and_push:
    runs-on: ubuntu-latest
    needs: [integration_tests, security_scans]
    steps:
      - uses: actions/checkout@v4
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push Backend
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/orcaquant-backend:${{ github.sha }}"
          docker build -t "$IMAGE" -f backend/Dockerfile .
          docker push "$IMAGE"
      - name: Set image output
        id: img
        run: echo "image=ghcr.io/${{ github.repository_owner }}/orcaquant-backend:${{ github.sha }}" >> "$GITHUB_OUTPUT"

  deploy_staging:
    runs-on: ubuntu-latest
    needs: [build_and_push]
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
      - name: Setup Helm
        uses: azure/setup-helm@v4
      - name: Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_STAGING }}" > ~/.kube/config
      - name: Helm Upgrade (Atomic + Wait)
        env:
          IMAGE: ${{ steps.img.outputs.image }}
        run: |
          helm upgrade --install orcaquant ./helm/orcaquant \
            --namespace orcaquant-staging --create-namespace \
            --set image.repository="${IMAGE%:*}" \
            --set image.tag="${IMAGE##*:}" \
            --atomic --wait --timeout 5m || true
      - name: Smoke Check
        run: |
          chmod +x scripts/wait-for-http.sh || true
          ./scripts/wait-for-http.sh "https://staging.orcaquant.com/healthz" 60 5 || true

  test_rollback:
    runs-on: ubuntu-latest
    needs: [deploy_staging]
    if: ${{ vars.TEST_ROLLBACK == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: azure/setup-kubectl@v4
      - uses: azure/setup-helm@v4
      - name: Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_STAGING }}" > ~/.kube/config
      - name: Deploy bad image (simulate)
        run: |
          set -e
          helm upgrade orcaquant ./helm/orcaquant \
            --namespace orcaquant-staging \
            --set image.tag="non-existing-tag" \
            --atomic --wait --timeout 2m || echo "expected failure"
      - name: Ensure rollout undone
        run: |
          kubectl rollout status deploy/orcaquant -n orcaquant-staging || true

