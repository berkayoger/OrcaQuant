# ---------- GENEL AYARLAR ----------
FLASK_ENV=development                     # veya production
SECRET_KEY=change-me                      # Flask gizli anahtarı
LOG_LEVEL=INFO                            # INFO, DEBUG, WARNING
CORS_ORIGINS=http://localhost:3000        # Virgülle ayrık origin listesi
PRICE_CACHE_TTL=300                       # Saniye cinsinden fiyat cache süresi
SKIP_HEAVY_IMPORTS=false                  # True ise ağır import'ları atla
ENABLE_SCHEDULER=false                    # True ise background scheduler çalışır
USE_REDIS_FEATURE_FLAGS=false             # Özellik bayrakları için Redis kullan
REDIS_URL=redis://localhost:6379/0        # Redis URL (flag yönetimi için)

# ---------- TEST ÇALIŞTIRMA (Admin) ----------
# Admin panelinden test tetiklemeyi aç/kapat.
# PROD'da default kapalı tutmanız önerilir.
ALLOW_ADMIN_TEST_RUN=false

# ---------- METRICS / OBSERVABILITY ----------
# /metrics endpoint'i için opsiyonel temel kimlik doğrulama
METRICS_BASIC_AUTH_USER=
METRICS_BASIC_AUTH_PASS=
# Opsiyonel IP allowlist (virgülle ayrık). Boş ise tüm IP'ler erişebilir.
METRICS_ALLOW_IPS=
# Histogram bucket'ları (saniye, virgülle). Boş bırakılırsa varsayılan kullanılır.
METRICS_LATENCY_BUCKETS=

# Sağlık endpoint'leri için auth gerekli mi?
REQUIRE_AUTH_FOR_HEALTH=false

# Limit reset günü (1-28 arası). Ayın bu gününde aylık limitler sıfırlanır.
# Boş bırakılırsa varsayılan: her ayın 1'i.
LIMITS_RESET_DAY=1

# ---------- DRAKS Karar Motoru ----------
# FastAPI servis adresi (ayrı motor kullanıyorsanız). docker-compose içinde genelde:
#   http://draks-engine:8000
# Entegre (Flask içindeki minimal motor) kullanıyorsanız bu değişkeni boş bırakabilirsiniz.
DRAKS_ENGINE_URL=http://localhost:8000
# Gelişmiş ölçekleme/filtreleme (rejime duyarlı) için toggle
# Flag ile de açılabilir: draks_advanced / draks_advanced_enabled
DRAKS_ADVANCED=false
# Canlı modda daha sıkı risk kapakları
# Sadece ölçek tavanını daraltır; limit/flag kontrollerini etkilemez
DRAKS_LIVE_MODE=false
# Özelliği açmak için feature flag kullanın:
#  - Admin Feature Flags arayüzünden veya API ile "draks" / "draks_enabled" → true yapın.
#  - Redis kullanıyorsanız key: feature_flag:draks (value: "true")

# ---------- DRAKS BATCH (Toplu Analiz) ----------
DRAKS_BATCH_ENABLED=false
BATCH_MAX_SYMBOLS=50
BATCH_MAX_CANDLES=500
BATCH_RATE_LIMIT=2/hour
BATCH_JOB_TIMEOUT=300
OHLCV_CACHE_TTL=600
DECISION_CACHE_TTL=600
BATCH_REQUIRE_2FA=false
BATCH_IP_ALLOWLIST=
BATCH_ADMIN_APPROVAL_THRESHOLD=25
# Celery worker RAM koruması (iş içinden fail-fast; ayrıca worker seviyesinde --max-memory-per-child önerilir)
CELERY_WORKER_MEMORY_LIMIT_MB=512
ANOMALY_WINDOW_SEC=900
ANOMALY_MAX_SUBMITS_PER_WINDOW=5

# ---------- VERİTABANI ----------
DATABASE_URL=postgresql://user:password@localhost:5432/ytdcrypto
# Opsiyonel: SQLite yedeği almak için dosya yolu
DATABASE_FILE=./ytdcrypto.db
BACKUP_RETENTION=7                        # Gün cinsinden tutulacak yedek sayısı
ALEMBIC_INI=alembic.ini                   # Migration config yolu
ALEMBIC_SCRIPT_LOCATION=alembic           # Migration script dizini

# ---------- CELERY ----------
CELERY_TASK_ALWAYS_EAGER=false            # Testlerde true
CELERY_BROKER_URL=${REDIS_URL}
CELERY_RESULT_BACKEND=${REDIS_URL}

# ---------- PAYMENT (IYZICO) ----------
IYZICO_API_KEY=
IYZICO_SECRET=
IYZICO_BASE_URL=https://api.iyzipay.com

# ---------- JWT / AUTH ----------
JWT_SECRET_KEY=change-me-too
ACCESS_TOKEN_SECRET=change-me-access
REFRESH_TOKEN_SECRET=change-me-refresh
ACCESS_TOKEN_EXP_MINUTES=15
REFRESH_TOKEN_EXP_DAYS=7
# Opsiyonel eski değişken adları
JWT_ACCESS_TOKEN_EXPIRES=3600    # seconds
JWT_REFRESH_TOKEN_EXPIRES=86400  # seconds
DISABLE_JWT_CHECKS=false         # True ise testlerde JWT doğrulaması pasif

# ---------- MAIL (OPSİYONEL) ----------
MAIL_SERVER=
MAIL_PORT=587
MAIL_USE_TLS=true
MAIL_USERNAME=
MAIL_PASSWORD=

# ---------- PLAN FİYATLARI ----------
BACKEND_PLAN_PRICES_BASIC=9.99
BACKEND_PLAN_PRICES_ADVANCED=24.99
BACKEND_PLAN_PRICES_PREMIUM=49.99

# ---------- UYARI / LOG ----------
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/xxx/yyy/zzz
ADMIN_ALERT_EMAIL=admin@example.com
AUDIT_FALLBACK_LOG_DIR=./logs            # Slack yoksa logların yazılacağı dizin

# ---------- ADMIN / GÜVENLİK ----------
ADMIN_ACCESS_KEY=

# ---------- STAGING / İNFR A ----------
# Caddy reverse proxy için FQDN
STAGING_FQDN=staging.example.com

# Backend app import yolları (virgülle ayrık)
APP_IMPORT_CANDIDATES=backend.app:create_app,backend.app:app,app:create_app,app:app

# Opsiyonel: Gunicorn ayarları
GUNICORN_WORKERS=4
GUNICORN_THREADS=4

# Sunucu host/port override (genelde gerekmez)
HOST=0.0.0.0
PORT=8000

# Sistemde gerçek değerleri içeren `.env.staging` oluşturup
# gizli anahtarları oraya yazmayı unutmayın.
# === Secrets & JWT ===
# SECRET_PROVIDER: aws | azure | env
SECRET_PROVIDER=aws
JWT_SECRET_NAME=jwt-secret
AZURE_KEY_VAULT_URL=https://your-vault.vault.azure.net/

# JWT Configuration - Use AWS KMS or Azure Key Vault in production
JWT_SECRET_KMS_KEY_ID=arn:aws:kms:region:account:key/xxx
JWT_ROTATION_INTERVAL_DAYS=30
JWT_KEY_VERSION=1
ACCESS_TOKEN_EXPIRES_MINUTES=15
REFRESH_TOKEN_EXPIRES_DAYS=30
CSRF_SECRET=change-this-long-random-string
TOTP_ISSUER_NAME=YTD-Crypto

# === Database Configuration with TLS ===
DATABASE_URL=postgresql://user:password@localhost/ytd_db
DATABASE_SSL_MODE=require
DATABASE_SSL_CERT_PATH=/etc/ssl/certs/db-cert.pem
DATABASE_SSL_KEY_PATH=/etc/ssl/private/db-key.pem
DATABASE_CONNECTION_POOL_SIZE=20

# === Redis Configuration for Session / Rate Limit / Revocation ===
REDIS_URL=redis://localhost:6379
REDIS_SSL_ENABLED=true
REDIS_SSL_CERT_PATH=/etc/ssl/certs/redis-cert.pem
REDIS_SSL_KEY_PATH=/etc/ssl/private/redis-key.pem

# === Security Headers ===
SECURE_HEADERS_ENABLED=true
HSTS_MAX_AGE=31536000
CSP_POLICY="default-src 'self'; script-src 'self' 'unsafe-inline'"

# === CORS (optional) ===
CORS_ORIGINS=http://localhost:3000,https://app.example.com
CORS_ALLOW_CREDENTIALS=true

# === Rate Limiting / Lockout ===
LOGIN_MAX_ATTEMPTS=5
LOGIN_LOCKOUT_DURATION_MINUTES=15
RATE_LIMIT_DEFAULT=100/minute

# (Optional fallback when SECRET_PROVIDER=env)
JWT_SECRET=your-dev-only-secret

# === WSGI Entrypoint (Security wrapper) ===
# Mevcut app'ini otomatik bulup güvenlik katmanlarını enjekte eden sarmalayıcı.
# Prod/staging’de Gunicorn vb. için bu değeri kullan:
#   gunicorn -w 4 -t 120 -b 0.0.0.0:8000 ${WSGI_APP}
WSGI_APP=app.secure_app:app

# === Login özel limitleri (opsiyonel) ===
# /login, /api/auth/login gibi endpoint’ler için daha sıkı sınır
LOGIN_RATE_LIMIT=10/minute

# === CORS Origin’leri (sert) ===
# Boş bırakmayın; sadece izinli origin’leri yazın.
# CORS_ORIGINS=http://localhost:3000,https://app.example.com
# CORS_ALLOW_CREDENTIALS=true

# === Güvenlik Başlıkları ===
# CSP_POLICY="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data:"
# HSTS_MAX_AGE=31536000

# ================= Added by ensure_env_keys.py =================
# Aşağıdaki anahtarlar yeni özellikler için gereklidir. Üretimde gerçek sırları
# AWS Secrets Manager / Azure Key Vault üzerinden sağlayın.
EMAIL_FROM=noreply@example.com
BILLING_PROVIDER=stripe
SITE_URL=https://app.example.com
CHECKOUT_SUCCESS_PATH=/billing/success
CHECKOUT_CANCEL_PATH=/billing/cancel
STRIPE_SECRET_KEY=sk_test_xxx
STRIPE_WEBHOOK_SECRET=whsec_xxx
STRIPE_BILLING_PORTAL_RETURN_URL=https://app.example.com/account
CRAFTGATE_API_KEY=your-key
CRAFTGATE_SECRET_KEY=your-secret
CRAFTGATE_MERCHANT_ID=12345
CRAFTGATE_WEBHOOK_SECRET=your-webhook-secret
SEED_PLANS=BASIC:999:TRY:month,PRO:2999:TRY:month,PREMIUM:4999:TRY:month
# === App security hardening (runtime) ===
# Maksimum istek gövdesi (byte). Büyük payload DOS'unu önler.
MAX_CONTENT_LENGTH=2097152
# Session cookie sert ayarlar
SESSION_COOKIE_SECURE=true
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=Lax

# CORS detayları (sıkı)
CORS_ALLOWED_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS
CORS_ALLOWED_HEADERS=Authorization,Content-Type,X-CSRF-Token
CORS_EXPOSE_HEADERS=X-Request-ID

# CSP'ye modern clickjacking koruması eklemek isterseniz:
# CSP_POLICY="default-src 'self'; script-src 'self'; style-src 'self'; frame-ancestors 'none'"

# === Reverse Proxy (Nginx/Traefik/Cloudflare) arkası için ===
# X-Forwarded-* başlıklarına güvenerek is_secure/HSTS/secure cookie'nin doğru çalışması.
PROXY_FIX_ENABLED=true
PROXY_FIX_X_FOR=1
PROXY_FIX_X_PROTO=1
PROXY_FIX_X_HOST=1
PROXY_FIX_X_PORT=1
PROXY_FIX_X_PREFIX=0
